import type { GetStaticProps, NextPage } from "next";
import { createClient } from "next-sanity";
import createImageUrl from "@sanity/image-url";
import Head from "next/head";
import Header from "../components/header/Header";
import Hero from "../components/hero/Hero";
import About from "../components/about/About";
import ExperienceComponent from "../components/experience/ExperienceComponent";
import Skills from "../components/skills/Skills";
import Projects from "../components/projects/Projects";
import ContactMe from "../components/contact/ContactMe";
import { Experience, Skill, Social, Project, HomeInfo } from "../typings";

import { motion } from "framer-motion";
import { useState } from "react";

type Props = {
  homeInfo: HomeInfo;
  experiences: Experience[];
  skills: Skill[];
  socials: Social[];
  projects: Project[];
};

const Home = ({ homeInfo, socials, experiences, skills, projects }: Props) => {
  return (
    <div className="scrollbar-thin scrollbar-track-neutral-100/20 scrollbar-thumb-neutral-100/50 bg-indigo-300 h-screen text-[#140e2c] snap-y snap-mandatory overflow-y-scroll overflow-x-hidden z-0">
      <motion.video
        initial={{ opacity: 0 }}
        animate={{
          opacity: 1,
        }}
        transition={{
          duration: 0.6,
          delay: 0.3,
        }}
        playsInline
        autoPlay
        muted
        loop
        style={{
          height: "100vh",
          position: "absolute",
          width: "100vw",
          objectPosition: "top",
          objectFit: "cover",
          backgroundColor: "white",
          backgroundPosition: "top right",
        }}
      >
        <source src={"/aguabg.mp4"} />
      </motion.video>

      <Head>
        <title>Val's Portfolio</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header socials={socials} />

      <section id="hero" className="snap-start scroll-smooth z-50">
        <Hero homeInfo={homeInfo} />
      </section>

      <section id="about" className="snap-center scroll-smooth z-50">
        <About aboutInfo={homeInfo} />
      </section>

      <section id="experiences" className="snap-center scroll-smooth z-50">
        <ExperienceComponent experiences={experiences} />
      </section>

      <section id="skills" className="snap-start scroll-smooth z-50">
        <Skills skills={skills} />
      </section>

      <section id="projects" className="snap-start scroll-smooth z-50">
        <Projects projects={projects} />
      </section>

      <section id="contact" className="snap-start scroll-smooth z-50">
        <ContactMe />
      </section>
      {/* <div className="w-full absolute bottom-6 z-50 h-fit items-center flex justify-center">
        <div
          className="bg-green-200 flex items-center gap-2"
        >
          <div className="h-6 w-6 bg-indigo-300 rounded-full cursor-pointer"></div>
          <p className={isHovered == true ? "bg-yellow-400" : "bg-red-600"}>
            back to top
          </p>
        </div>
      </div> */}
    </div>
  );
};

export default Home;

const client = createClient({
  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID!,
  dataset: process.env.NEXT_PUBLIC_SANITY_DATASET || "production",
  apiVersion: "2022-03-25",
  useCdn: process.env.NODE_ENV === "production",
});

const urlFor = (source: any) => createImageUrl(client).image(source);

export const getStaticProps: GetStaticProps<Props> = async () => {
  const homeInfo: HomeInfo = await client.fetch(`*[_type == "pageInfo"][0]`);
  const experiences: Experience[] =
    await client.fetch(`*[_type == "experience"]{
      ...,
      technologies[]->
    } | order(startDate desc)
    `);
  const socials: Social[] = await client.fetch(`*[_type == "socials"]`);
  const projects: Project[] = await client.fetch(`*[_type == "project"]{
    ...,
    technologies[]->
  }`);
  const skills: Skill[] = await client.fetch(`*[_type == "skills"]`);

  return {
    props: {
      homeInfo,
      experiences,
      socials,
      skills,
      projects,
    },

    //Next.js will attempt to re-generate the page:
    //- when a request comes in
    //- at most once every 10sec
    revalidate: 10,
  };
};
